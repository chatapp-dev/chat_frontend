@use "sass:map";

@use "./variables.scss" as var;
@use "./functions.scss" as *;
//миксины adaptive-font и adaptive-value ни где не применяются
@mixin adaptive-font($pc, $mob) {
  $pcSize: convert-rem-to-unitless($pc);
  $mobSize: convert-rem-to-unitless($mob);

  $addSize: $pcSize - $mobSize;
  $addMobSize: $addSize + $addSize * 0.7;
  @include screen-md-max {
    font-size: calc(
      #{$mobSize + px} + #{$addMobSize} * ((100vw - 320px) / #{$maxWidth})
    );
  }
  @include screen-md-min {
    font-size: calc(#{$mobSize + px} + #{$addSize} * (100vw / #{$maxWidth}));
  }
}

@mixin adaptive-value($property, $start, $min, $type: 1) {
  $startSize: convert-rem-to-unitless($start);
  $minSize: convert-rem-to-unitless($min);
  $addSize: $startSize - $minSize;
  @if $type == 1 {
    #{$property}: $startSize + px;
    @media (max-width: #{$maxWidthContainer + px}) {
      #{$property}: calc(
        #{$minSize + px} + #{$addSize} *
          ((100vw - 320px) / #{$maxWidthContainer - 320})
      );
    }
  } @else if $type == 2 {
    #{$property}: $startSize + px;
    @media (min-width: #{$maxWidthContainer + px}) {
      #{$property}: calc(
        #{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidth - 320})
      );
    }
  } @else {
    #{$property}: calc(
      #{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidth - 320})
    );
  }
}
//breakpoints
@mixin mq($bp: sm, $type: min, $is-retina: false) {
  @if map.has-key(var.$breakpoints, $bp) {
    $width: map.get(var.$breakpoints, $bp);

    @if $type == max {
      $width: $width - 0.02px;
    }

    @media only screen and (#{$type}-width: $width) {
      @if $is-retina {
        @media (min-device-pixel-ratio: 2),
          (min-resolution: 192dpi),
          (min-resolution: 2dppx) {
          @content;
        }
      } @else {
        @content;
      }
    }
  } @else {
    @error "";
  }
}
